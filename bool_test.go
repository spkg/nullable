package nullable

// Do not modify. Generated by nullable-generate.

import (
	"database/sql/driver"
	"fmt"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestBool(t *testing.T) {
	testCases := []struct {
		ScanValue     interface{}
		ExpectedError string
		ExpectedValid bool
		ExpectedValue bool
		JSONText      string
	}{
		{
			ScanValue:     true,
			ExpectedError: "",
			ExpectedValid: true,
			ExpectedValue: true,
			JSONText:      `true`,
		},
		{
			ScanValue:     false,
			ExpectedError: "",
			ExpectedValid: true,
			ExpectedValue: false,
			JSONText:      `false`,
		},
		{
			ScanValue:     []byte("bytes"),
			ExpectedError: "sql/driver",
			ExpectedValid: false,
			ExpectedValue: false,
			JSONText:      `null`,
		},
		{
			ScanValue:     nil,
			ExpectedError: "",
			ExpectedValid: false,
			ExpectedValue: false,
			JSONText:      "null",
		},
	}
	assert := assert.New(t)
	for i, tc := range testCases {
		tcName := fmt.Sprintf("test case %d", i)
		var nv Bool
		err := nv.Scan(tc.ScanValue)
		if tc.ExpectedError != "" {
			assert.Error(err, tcName)
			assert.True(strings.Contains(err.Error(), tc.ExpectedError), err.Error())
			continue
		} else {
			assert.NoError(err, tcName)
			assert.Equal(tc.ExpectedValid, nv.Valid, tcName)
			assert.Equal(tc.ExpectedValue, nv.Bool, tcName)
		}
		v, err := nv.Value()
		assert.NoError(err)
		if tc.ExpectedValid {
			assert.Equal(driver.Value(bool(tc.ExpectedValue)), v, tcName)
			assert.NotNil(nv.Ptr(), tcName)
			assert.Equal(nv.Bool, *(nv.Ptr()), tcName)
			nv2 := BoolFromPtr(nv.Ptr())
			assert.Equal(nv, nv2, tcName)
		} else {
			assert.Nil(v, tcName)
			assert.Nil(nv.Ptr(), tcName)
			nv2 := BoolFromPtr(nv.Ptr())
			assert.Equal(nv, nv2, tcName)
		}
		jsonText, err := nv.MarshalJSON()
		assert.NoError(err)
		assert.Equal(tc.JSONText, string(jsonText), tcName)
		var nt2 Bool
		err = nt2.UnmarshalJSON(jsonText)
		assert.NoError(err)
		assert.Equal(nv.Valid, nt2.Valid, tcName)
		// invalid JSON for any type
		err = nt2.UnmarshalJSON([]byte("00 this is not valid xx"))
		assert.Error(err)
	}
}
