package nullable

// Do not modify. Generated by nullable-generate.

import (
	"bytes"
	{{if not .NoScan -}}
	"database/sql"
	{{- end}}
	{{if not .NoValue -}}
	"database/sql/driver"
	{{- end}}
	"encoding/json"
	{{range .Imports -}}
	"{{.}}"
	{{- end}}
)

// {{.Type}} represents {{.Indefinite}} {{.NativeType}} value that may be null.
// This type implements the Scanner interface so it
// can be used as a scan destination, similar to NullString.
// It also implements the necessary interfaces to serialize
// to and from JSON.
type {{.Type}} struct {
	{{.Type}} {{.NativeType}}
	Valid bool
}

// {{.Type}}FromPtr returns a {{.Type}} whose value matches ptr.
func {{.Type}}FromPtr(ptr *{{.NativeType}}) {{.Type}} {
	var v {{.Type}}
	return v.Assign(ptr)
}

// Assign the value of the pointer. If the pointer is nil,
// then then Valid is false, otherwise Valid is true.
func ({{.Var}} *{{.Type}}) Assign(ptr *{{.NativeType}}) {{.Type}} {
	if ptr == nil {
		{{.Var}}.Valid = false
		{{.Var}}.{{.Type}} = {{.ZeroVal}}
	} else {
		{{.Var}}.Valid = true
		{{.Var}}.{{.Type}} = *ptr
	}
	return *{{.Var}}
}

// Ptr returns a pointer to {{.NativeType}}. If Valid is false
// then the pointer is nil, otherwise it is non-nil.
func ({{.Var}} {{.Type}}) Ptr() *{{.NativeType}} {
	if {{.Var}}.Valid {
		v := {{.Var}}.{{.Type}}
		return &v
	}
	return nil
}

{{if not .NoScan -}}
// Scan implements the sql.Scanner interface.
func ({{.Var}} *{{.Type}}) Scan(value interface{}) error {
	var nt sql.{{.NullType}}
	err := nt.Scan(value)
	if err != nil {
		return err
	}
	{{.Var}}.Valid = nt.Valid
	{{.Var}}.{{.Type}} = {{.NativeType}}(nt.{{.NullTypeField}})
	return nil
}
{{- end }}

{{if not .NoValue -}}
// Value implements the driver.Valuer interface.
func ({{.Var}} {{.Type}}) Value() (driver.Value, error) {
	if !{{.Var}}.Valid {
		return nil, nil
	}
	return {{.NullTypeVal}}({{.Var}}.{{.Type}}), nil
}
{{- end}}

// MarshalJSON implements the json.Marshaler interface.
func ({{.Var}} {{.Type}}) MarshalJSON() ([]byte, error) {
	if {{.Var}}.Valid {
		return json.Marshal({{.Var}}.{{.Type}})
	}
	return []byte("null"), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func ({{.Var}} *{{.Type}}) UnmarshalJSON(p []byte) error {
	if bytes.Equal(p, []byte("null")) {
		{{.Var}}.{{.Type}} = {{.ZeroVal}}
		{{.Var}}.Valid = false
		return nil
	}

	var v {{.NativeType}}
	if err := json.Unmarshal(p, &v); err != nil {
		return err
	}

	{{.Var}}.{{.Type}} = v
	{{.Var}}.Valid = true
	return nil
}
