package nullable

// Do not modify. Generated by nullable-generate.

import (
	"bytes"
	"database/sql"
	"database/sql/driver"
	"encoding/json"
)

// Float64 represents a float64 value that may be null.
// This type implements the Scanner interface so it
// can be used as a scan destination, similar to NullString.
// It also implements the necessary interfaces to serialize
// to and from JSON.
type Float64 struct {
	Float64 float64
	Valid   bool
}

// Float64FromPtr returns a Float64 whose value matches ptr.
func Float64FromPtr(ptr *float64) Float64 {
	var v Float64
	return v.Assign(ptr)
}

// Assign the value of the pointer. If the pointer is nil,
// then then Valid is false, otherwise Valid is true.
func (n *Float64) Assign(ptr *float64) Float64 {
	if ptr == nil {
		n.Valid = false
		n.Float64 = 0
	} else {
		n.Valid = true
		n.Float64 = *ptr
	}
	return *n
}

// Ptr returns a pointer to float64. If Valid is false
// then the pointer is nil, otherwise it is non-nil.
func (n Float64) Ptr() *float64 {
	if n.Valid {
		v := n.Float64
		return &v
	}
	return nil
}

// Scan implements the sql.Scanner interface.
func (n *Float64) Scan(value interface{}) error {
	var nt sql.NullFloat64
	err := nt.Scan(value)
	if err != nil {
		return err
	}
	n.Valid = nt.Valid
	n.Float64 = nt.Float64

	return nil
}

// Value implements the driver.Valuer interface.
func (n Float64) Value() (driver.Value, error) {
	if !n.Valid {
		return nil, nil
	}
	return n.Float64, nil

}

// MarshalJSON implements the json.Marshaler interface.
func (n Float64) MarshalJSON() ([]byte, error) {
	if n.Valid {
		return json.Marshal(n.Float64)
	}
	return []byte("null"), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (n *Float64) UnmarshalJSON(p []byte) error {
	if bytes.Equal(p, jsonNull) {
		n.Float64 = 0
		n.Valid = false
		return nil
	}

	var v float64
	if err := json.Unmarshal(p, &v); err != nil {
		return err
	}

	n.Float64 = v
	n.Valid = true
	return nil
}
