package nullable

// Do not modify. Generated by nullable-generate.

import (
	"database/sql/driver"
	"fmt"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestTime(t *testing.T) {
	testCases := []struct {
		ScanValue     interface{}
		ExpectedError bool
		ExpectedValid bool
		ExpectedValue time.Time
		JSONText      string
	}{
		{
			ScanValue:     time.Date(2001, 11, 10, 15, 04, 05, 0, time.FixedZone("AEST", 10*3600)),
			ExpectedValid: true,
			ExpectedValue: time.Date(2001, 11, 10, 15, 04, 05, 0, time.FixedZone("AEST", 10*3600)),
			JSONText:      `"2001-11-10T15:04:05+10:00"`,
		},
		{
			ScanValue:     53.5,
			ExpectedError: true,
			ExpectedValid: false,
			ExpectedValue: time.Time{},
			JSONText:      `null`,
		},
		{
			ScanValue:     nil,
			ExpectedValid: false,
			ExpectedValue: time.Time{},
			JSONText:      "null",
		},
	}
	assert := assert.New(t)
	for i, tc := range testCases {
		tcName := fmt.Sprintf("test case %d", i)
		var nv Time
		err := nv.Scan(tc.ScanValue)
		if tc.ExpectedError {
			assert.Error(err, tcName)
			continue
		} else {
			assert.NoError(err, tcName)
			assert.Equal(tc.ExpectedValid, nv.Valid, tcName)
			assert.Equal(tc.ExpectedValue, nv.Time, tcName)
		}
		v, err := nv.Value()
		assert.NoError(err)
		if tc.ExpectedValid {
			assert.Equal(driver.Value((tc.ExpectedValue)), v, tcName)
			assert.NotNil(nv.Ptr(), tcName)
			assert.Equal(nv.Time, *(nv.Ptr()), tcName)
			nv2 := TimeFromPtr(nv.Ptr())
			assert.Equal(nv, nv2, tcName)
		} else {
			assert.Nil(v, tcName)
			assert.Nil(nv.Ptr(), tcName)
			nv2 := TimeFromPtr(nv.Ptr())
			assert.Equal(nv, nv2, tcName)
		}
		jsonText, err := nv.MarshalJSON()
		assert.NoError(err)
		assert.Equal(tc.JSONText, string(jsonText), tcName)
		var nt2 Time
		err = nt2.UnmarshalJSON(jsonText)
		assert.NoError(err)
		assert.Equal(nv.Valid, nt2.Valid, tcName)
		// invalid JSON for any type
		err = nt2.UnmarshalJSON([]byte("00 this is not valid xx"))
		assert.Error(err)

		// test Normalized comparison
		{
			n1 := Time{
				Time: time.Now(),
			}

			n2 := Time{
				Time: time.Time{},
			}

			n3 := Time{
				Time:  time.Now(),
				Valid: true,
			}

			if n1.Normalized() != n2.Normalized() {
				t.Errorf("expected equal, got not equal: %v != %v", n1, n2)
			}
			if n3.Normalized() != n3.Normalized() {
				t.Errorf("expected equal, got not equal: %v != %v", n3, n3)
			}
		}
	}
}
