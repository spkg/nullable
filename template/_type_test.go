package nullable

// Do not modify. Generated by nullable-generate.

import (
	"database/sql/driver"
	"fmt"
	"testing"
	{{range .Imports -}}
	"{{.}}"
	{{- end}}

	"github.com/stretchr/testify/assert"
)

func Test{{.Type}}(t *testing.T) {
	testCases := []struct {
		ScanValue     interface{}
		ExpectedError bool
		ExpectedValid bool
		ExpectedValue {{.NativeType}}
		JSONText      string
	}{
	{{- if eq .NativeType "string"}}
		{
			ScanValue:     "string-val",
			ExpectedValid: true,
			ExpectedValue: "string-val",
			JSONText:      `"string-val"`,
		},
		{
			ScanValue:     []byte("bytes"),
			ExpectedValid: true,
			ExpectedValue: "bytes",
			JSONText:      `"bytes"`,
		},
		{
			ScanValue:     nil,
			ExpectedValid: false,
			ExpectedValue: "",
			JSONText:      "null",
		},
		{
			ScanValue:     int64(99),
			ExpectedValid: true,
			ExpectedValue: "99",
			JSONText:      "\"99\"",
		},
		{
			ScanValue:     false,
			ExpectedValid: true,
			ExpectedValue: "false",
			JSONText:      "\"false\"",
		},
		{
			ScanValue:     fmt.Errorf("I am an error"),
			ExpectedError: true,
			ExpectedValid: false,
			ExpectedValue: "",
			JSONText:      "null",
		},
		{{- else if eq .NativeType "bool"}}
			{
				ScanValue:     true,
				ExpectedValid: true,
				ExpectedValue: true,
				JSONText:      `true`,
			},
			{
				ScanValue:     false,
				ExpectedValid: true,
				ExpectedValue: false,
				JSONText:      `false`,
			},
			{
				ScanValue:     []byte("bytes"),
				ExpectedError: true,
				ExpectedValid: false,
				ExpectedValue: false,
				JSONText:      `null`,
			},
			{
				ScanValue:     nil,
				ExpectedValid: false,
				ExpectedValue: false,
				JSONText:      "null",
			},
		{{- else if eq .NativeType "time.Time"}}
			{
				ScanValue:     time.Date(2001, 11, 10, 15, 04, 05, 0, time.FixedZone("AEST", 10*3600)),
				ExpectedValid: true,
				ExpectedValue: time.Date(2001, 11, 10, 15, 04, 05, 0, time.FixedZone("AEST", 10*3600)),
				JSONText:      `"2001-11-10T15:04:05+10:00"`,
			},
			{
				ScanValue:     53.5,
				ExpectedError: true,
				ExpectedValid: false,
				ExpectedValue: time.Time{},
				JSONText:      `null`,
			},
			{
				ScanValue:     nil,
				ExpectedValid: false,
				ExpectedValue: time.Time{},
				JSONText:      "null",
			},
	{{else}}
		{
			ScanValue:     int64(11),
			ExpectedValid: true,
			ExpectedValue: 11,
			JSONText:      `11`,
		},
		{
			ScanValue:     uint64(12),
			ExpectedValid: true,
			ExpectedValue: 12,
			JSONText:      `12`,
		},
		{
			ScanValue:     int32(13),
			ExpectedValid: true,
			ExpectedValue: 13,
			JSONText:      `13`,
		},
		{
			ScanValue:     uint32(14),
			ExpectedValid: true,
			ExpectedValue: 14,
			JSONText:      `14`,
		},
		{
			ScanValue:     []byte("string value"),
			ExpectedError: true,
			ExpectedValid: false,
			ExpectedValue: 0,
			JSONText:      `null`,
		},
		{
			ScanValue:     nil,
			ExpectedValid: false,
			ExpectedValue: 0,
			JSONText:      "null",
		},
		{{end}}
	}
	assert := assert.New(t)
	for i, tc := range testCases {
		tcName := fmt.Sprintf("test case %d", i)
		var nv {{.Type}}
		err := nv.Scan(tc.ScanValue)
		if tc.ExpectedError {
			assert.Error(err, tcName)
			continue
		} else {
			assert.NoError(err, tcName)
			assert.Equal(tc.ExpectedValid, nv.Valid, tcName)
			assert.Equal(tc.ExpectedValue, nv.{{.Type}}, tcName)
		}
		v, err := nv.Value()
		assert.NoError(err)
		if tc.ExpectedValid {
			assert.Equal(driver.Value({{.NullTypeVal}}(tc.ExpectedValue)), v, tcName)
			assert.NotNil(nv.Ptr(), tcName)
			assert.Equal(nv.{{.Type}}, *(nv.Ptr()), tcName)
			nv2 := {{.Type}}FromPtr(nv.Ptr())
			assert.Equal(nv, nv2, tcName)
		} else {
			assert.Nil(v, tcName)
			assert.Nil(nv.Ptr(), tcName)
			nv2 := {{.Type}}FromPtr(nv.Ptr())
			assert.Equal(nv, nv2, tcName)
		}
		jsonText, err := nv.MarshalJSON()
		assert.NoError(err)
		assert.Equal(tc.JSONText, string(jsonText), tcName)
		var nt2 {{.Type}}
		err = nt2.UnmarshalJSON(jsonText)
		assert.NoError(err)
		assert.Equal(nv.Valid, nt2.Valid, tcName)
		// invalid JSON for any type
		err = nt2.UnmarshalJSON([]byte("00 this is not valid xx"))
		assert.Error(err)
		
		// test Normalized comparison
		{
			n1 := {{.Type}} {
				{{.Type}}: {{.NonZeroVal}},
			}
			
			n2 := {{.Type}} {
				{{.Type}}: {{.ZeroVal}},
			}
			
			n3 := {{.Type}} {
				{{.Type}}: {{.NonZeroVal}},
				Valid: true,
			}
			
			if n1.Normalized() != n2.Normalized() {
				t.Errorf("expected equal, got not equal: %v != %v", n1, n2)
			}
			if n3.Normalized() != n3.Normalized() {
				t.Errorf("expected equal, got not equal: %v != %v", n3, n3)
			}
		}
	}
}
