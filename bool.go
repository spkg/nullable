package nullable

// Do not modify. Generated by nullable-generate.

import (
	"bytes"
	"database/sql"
	"database/sql/driver"
	"encoding/json"
)

// Bool represents a bool value that may be null.
// This type implements the Scanner interface so it
// can be used as a scan destination, similar to NullString.
// It also implements the necessary interfaces to serialize
// to and from JSON.
type Bool struct {
	Bool  bool
	Valid bool
}

// BoolFromPtr returns a Bool whose value matches ptr.
func BoolFromPtr(ptr *bool) Bool {
	var v Bool
	return v.Assign(ptr)
}

// Assign the value of the pointer. If the pointer is nil,
// then then Valid is false, otherwise Valid is true.
func (b *Bool) Assign(ptr *bool) Bool {
	if ptr == nil {
		b.Valid = false
		b.Bool = false
	} else {
		b.Valid = true
		b.Bool = *ptr
	}
	return *b
}

// Ptr returns a pointer to bool. If Valid is false
// then the pointer is nil, otherwise it is non-nil.
func (b Bool) Ptr() *bool {
	if b.Valid {
		v := b.Bool
		return &v
	}
	return nil
}

// Scan implements the sql.Scanner interface.
func (b *Bool) Scan(value interface{}) error {
	var nt sql.NullBool
	err := nt.Scan(value)
	if err != nil {
		return err
	}
	b.Valid = nt.Valid
	b.Bool = nt.Bool

	return nil
}

// Value implements the driver.Valuer interface.
func (b Bool) Value() (driver.Value, error) {
	if !b.Valid {
		return nil, nil
	}
	return b.Bool, nil

}

// MarshalJSON implements the json.Marshaler interface.
func (b Bool) MarshalJSON() ([]byte, error) {
	if b.Valid {
		return json.Marshal(b.Bool)
	}
	return []byte("null"), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (b *Bool) UnmarshalJSON(p []byte) error {
	if bytes.Equal(p, []byte("null")) {
		b.Bool = false
		b.Valid = false
		return nil
	}

	var v bool
	if err := json.Unmarshal(p, &v); err != nil {
		return err
	}

	b.Bool = v
	b.Valid = true
	return nil
}
